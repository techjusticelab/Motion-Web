<!-- DocumentViewer.svelte -->
<script lang="ts">
	import { createEventDispatcher, onMount, onDestroy } from 'svelte';
	import { 
		formatDate, 
		formatDateTime, 
		formatFileSize, 
		formatPercentage, 
		formatCount, 
		formatDocumentType, 
		formatPersonName, 
		formatCourtName, 
		formatCaseInfo, 
		isEmptyValue 
	} from '$lib/utils/utils';
	import type { Document, SearchResponse } from '$lib/types';
	import { getDocumentUrl, getDocumentUrlWithSearch, downloadDocument } from '$lib/api';
	import { fade, fly, slide, scale } from 'svelte/transition';
	import { elasticOut, backOut, quintOut, cubicOut } from 'svelte/easing';
	import { CaseManager, type Case } from '$lib/supabase';
	import { page } from '$app/stores';

	const {
		docData = $bindable(null),
		isOpen = $bindable(false),
		supabase = null,
		session = null,
		user = null
	}: {
		docData?: Document | null;
		isOpen?: boolean;
		supabase?: any;
		session?: any;
		user?: any;
	} = $props();

	let isLoading = $state(true);
	let errorMessage = $state('');
	let url = $state('');
	let blobUrl = $state('');
	let useBlobFallback = $state(false);
	let viewerKey = $state(0); // Key to force re-render of PDF viewer

	// Case management
	let cases = $state<Case[]>([]);
	let caseManager = $state<CaseManager | null>(null);
	let showAddToCaseModal = $state(false);
	let selectedCaseId = $state('');
	let documentNotes = $state('');
	let isAddingToCase = $state(false);
	let showNewCaseModal = $state(false);
	let newCaseName = $state('');
	let isCreatingCase = $state(false);
	let successMessage = $state('');

	// Section collapse state
	let sectionsCollapsed = $state({
		document: false,
		case: false,
		content: false,
		properties: false,
		legal: false
	});

	const dispatch = createEventDispatcher<{
		close: void;
		search: {
			field: string;
			value: string;
		};
	}>();

	// Generate a UUID v5 from document data for database compatibility
	function generateDocumentUUID(docData: Document): string {
		// Create a consistent identifier from document data
		const identifier = docData.s3_uri || docData.file_name || JSON.stringify(docData);

		// Simple hash function to create consistent UUID-like string
		let hash = 0;
		for (let i = 0; i < identifier.length; i++) {
			const char = identifier.charCodeAt(i);
			hash = ((hash << 5) - hash) + char;
			hash = hash & hash; // Convert to 32-bit integer
		}

		// Convert hash to positive number and format as UUID
		const positiveHash = Math.abs(hash).toString(16).padStart(8, '0');
		const uuid = `${positiveHash.slice(0, 8)}-${positiveHash.slice(0, 4)}-4${positiveHash.slice(1, 4)}-8${positiveHash.slice(1, 4)}-${positiveHash}${positiveHash.slice(0, 4)}`;

		return uuid;
	}

	// Extract document ID from S3 URI or generate a consistent ID
	function getDocumentId(docData: Document): string {
		// Try to use id if available and it's a valid UUID format
		if (docData.id && docData.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
			return docData.id;
		}

		// If database expects UUIDs, generate one consistently
		return generateDocumentUUID(docData);
	}

	// Function to determine if file can be viewed in iframe
	function canViewInIframe(fileName: string): boolean {
		if (!fileName) return false;
		console.log(fileName);
		console.log(docData);
		console.log('DSAD', docData?.s3_uri);
		const extension = fileName.split('.').pop()?.toLowerCase() || '';
		// Most browsers can display these formats directly in an iframe
		return ['pdf', 'docx', 'txt', 'jpg', 'jpeg', 'png', 'gif'].includes(extension);
	}

	// Function to close the viewer
	function closeViewer() {
		dispatch('close');
	}
	// Reactive effect to update URL when docData changes
	$effect(() => {
		if (docData) {
			downloadFile();
		}
	});

	onMount(async () => {
		if (supabase && user) {
			caseManager = new CaseManager(supabase);

			// Test database access to debug the issue
			await caseManager.testDatabaseAccess();

			loadUserCases();
		}
	});

	// Cleanup blob URLs when component is destroyed to prevent memory leaks
	onDestroy(() => {
		if (blobUrl) {
			URL.revokeObjectURL(blobUrl);
		}
	});
	async function downloadFile() {
		if (docData) {
			// Reset viewer state when document changes
			isLoading = true;
			errorMessage = '';
			useBlobFallback = false;
			viewerKey += 1; // Force re-render of PDF viewer
			
			// Clean up previous blob URL
			if (blobUrl) {
				URL.revokeObjectURL(blobUrl);
				blobUrl = '';
			}
			
			try {
				// First try the standard URL generation with new file serving endpoints
				let documentUrl = getDocumentUrl(docData);
				
				// If no URL could be generated, try the search fallback
				if (!documentUrl) {
					console.log('Standard URL generation failed, trying file search...');
					documentUrl = await getDocumentUrlWithSearch(docData, session);
				}
				
				if (documentUrl) {
					url = documentUrl;
					console.log('Document URL using new file serving endpoint:', url);
					isLoading = false;
				} else {
					console.error('Failed to get document URL for:', docData);
					console.log('Document data:', {
						file_path: docData.file_path,
						s3_uri: docData.s3_uri,
						file_url: docData.file_url,
						file_name: docData.file_name
					});
					errorMessage = 'Document file not found. This document may need to be re-uploaded or the file path may be outdated.';
					isLoading = false;
				}
			} catch (error) {
				console.error('Error getting document URL:', error);
				errorMessage = 'Error loading document. Please try again.';
				isLoading = false;
			}
		}
	}

	// Function to load document as blob and create object URL (fallback for X-Frame-Options issues)
	async function loadDocumentAsBlob() {
		if (!docData) return;
		
		try {
			console.log('Attempting to load document as blob to bypass X-Frame-Options...');
			const blob = await downloadDocument(docData, session);
			
			if (blob) {
				// Clean up previous blob URL
				if (blobUrl) {
					URL.revokeObjectURL(blobUrl);
				}
				
				// Create new blob URL
				blobUrl = URL.createObjectURL(blob);
				useBlobFallback = true;
				console.log('Document loaded as blob successfully');
			} else {
				throw new Error('Failed to download document as blob');
			}
		} catch (error) {
			console.error('Error loading document as blob:', error);
			errorMessage = 'Unable to load document. Please try downloading it directly.';
		}
	}
	// Handle S3FileViewer events
	function handleViewerLoaded() {
		isLoading = false;
	}

	function handleViewerError(event?: Event | CustomEvent<{ message: string }>) {
		isLoading = false;
		
		// Handle different types of error events
		let message = 'Unable to display this document in the browser. Please download the file to view it.';
		
		if (event && 'detail' in event && event.detail && typeof event.detail === 'object' && 'message' in event.detail) {
			message = event.detail.message;
		}
		
		errorMessage = message;
		
		// Automatically try blob fallback for X-Frame-Options issues
		if (!useBlobFallback && url) {
			console.log('PDF display failed, attempting blob fallback...');
			loadDocumentAsBlob();
		}
	}

	// Load user's cases
	async function loadUserCases() {
		if (!caseManager || !user) return;
		try {
			cases = await caseManager.getUserCases(user.id);
		} catch (error) {
			console.error('Error loading cases:', error);
		}
	}

	// Open add to case modal
	function openAddToCaseModal() {
		selectedCaseId = '';
		documentNotes = '';
		showAddToCaseModal = true;
	}

	// Close add to case modal
	function closeAddToCaseModal() {
		showAddToCaseModal = false;
		selectedCaseId = '';
		documentNotes = '';
	}

	// Add document to selected case
	async function addDocumentToCase() {
		if (!caseManager || !docData || !selectedCaseId) {
			console.error('Missing required data:', {
				caseManager: !!caseManager,
				docData: !!docData,
				selectedCaseId: !!selectedCaseId,
				docDataId: docData?.id
			});
			return;
		}

		console.log('Adding document to case:', {
			caseId: selectedCaseId,
			documentId: docData.id,
			notes: documentNotes.trim()
		});

		console.log('Full docData object:', docData);
		console.log('Available docData properties:', Object.keys(docData));

		isAddingToCase = true;
		try {
			// Extract proper document ID
			const documentId = getDocumentId(docData);
			console.log('Using document ID:', documentId);

			const result = await caseManager.addDocumentToCase(
				selectedCaseId,
				documentId,
				documentNotes.trim() || undefined
			);
			console.log('Document added successfully:', result);

			// Find the case name for the success message
			const selectedCase = cases.find(c => c.id === selectedCaseId);
			successMessage = `Document added to case "${selectedCase?.case_name || 'Unknown'}" successfully!`;

			// Clear success message after 3 seconds
			setTimeout(() => {
				successMessage = '';
			}, 3000);

			closeAddToCaseModal();
		} catch (error) {
			console.error('Error adding document to case:', error);
		} finally {
			isAddingToCase = false;
		}
	}

	// Open new case modal
	function openNewCaseModal() {
		newCaseName = '';
		showNewCaseModal = true;
	}

	// Close new case modal
	function closeNewCaseModal() {
		showNewCaseModal = false;
		newCaseName = '';
	}

	// Create new case and add document
	async function createCaseAndAddDocument() {
		if (!caseManager || !user || !docData || !newCaseName.trim()) return;
		
		isCreatingCase = true;
		try {
			const newCase = await caseManager.createCase(user.id, newCaseName.trim());
			if (newCase) {
				cases = [newCase, ...cases];

				// Extract proper document ID
				try {
					const documentId = getDocumentId(docData);
					console.log('Using document ID for new case:', documentId);
					await caseManager.addDocumentToCase(newCase.id, documentId, documentNotes.trim() || undefined);
				} catch (error) {
					console.error('Error getting document ID for new case:', error);
				}

				closeNewCaseModal();
			}
		} catch (error) {
			console.error('Error creating case:', error);
		} finally {
			isCreatingCase = false;
		}
	}


	// Handle keydown for modal escape
	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape') {
			if (showAddToCaseModal) {
				closeAddToCaseModal();
			} else if (showNewCaseModal) {
				closeNewCaseModal();
			}
		}
	}

	// Section management functions
	function toggleSection(section: keyof typeof sectionsCollapsed) {
		sectionsCollapsed[section] = !sectionsCollapsed[section];
	}

	function getSectionIcon(collapsed: boolean): string {
		return collapsed ? 'M9 5l7 7-7 7' : 'M19 9l-7 7-7-7';
	}

	// Helper function to create search queries
	function createSearchForField(field: string, value: string) {
		if (!value) return;
		
		// Dispatch search event that can be caught by parent component
		dispatch('search', {
			field,
			value
		});
		
		// Also close the viewer since we're navigating to search
		closeViewer();
	}
</script>

<svelte:window onkeydown={handleKeydown} />

<!-- TODO: ADD SIMILAR FEATURES HERE SO WHEN YOU CLICK ON METADATA IT WILL AUTO SEARCH FOR SIMILAR SHIT -->
{#if isOpen && docData}
	<div
		class="opac fixed inset-0 z-50 flex justify-center p-4 shadow"
		in:fade={{ duration: 300, easing: cubicOut }}
		out:fade={{ duration: 500 }}
	>
		<div
			class="relative flex h-[95vh] w-[95vw] overflow-hidden text-wrap rounded-xl bg-white shadow-2xl flex-col md:flex-row"
			transition:fly={{ y: 20, duration: 800, easing: quintOut }}
		>
			<!-- Sidebar with metadata -->
			<div
				class="w-full md:w-1/4 overflow-auto border-r border-neutral-200 bg-neutral-50 p-4 md:p-6 max-h-[40vh] md:max-h-none"
				in:fly={{ x: -20, duration: 800, delay: 300, easing: cubicOut }}
			>
				<div class="mb-4">
					<h2
						class="truncate text-lg md:text-xl font-semibold text-neutral-800"
						in:slide={{ duration: 700, delay: 400 }}
					>
						{docData.metadata?.document_name || docData.file_name || 'Untitled Document'}
					</h2>
					<p class="mt-1 text-xs md:text-sm text-neutral-500" in:slide={{ duration: 700, delay: 500 }}>
						{docData.file_name}
					</p>
				</div>

				<!-- Document type tag -->
				<div class="mb-4">
					<span
						class="inline-flex rounded-full bg-primary-50 px-2 md:px-3 py-1 text-xs md:text-sm font-medium text-primary-700"
						in:scale={{ start: 0.9, duration: 600, delay: 600, easing: cubicOut }}
					>
						{formatDocumentType(docData.doc_type)}
					</span>
				</div>

				<!-- Metadata sections -->
				<div class="space-y-4 overflow-hidden" in:slide={{ duration: 600, delay: 650 }}>
					<h3 class="text-sm font-medium text-neutral-700">Document Details</h3>

					<!-- Document Information Section -->
					<div class="rounded-lg border border-neutral-200 bg-white">
						<button
							type="button"
							onclick={() => toggleSection('document')}
							class="flex w-full items-center justify-between p-3 text-left hover:bg-neutral-50"
						>
							<h4 class="text-sm font-medium text-neutral-800">Document Information</h4>
							<svg
								class="h-4 w-4 transform transition-transform {sectionsCollapsed.document ? '' : 'rotate-180'}"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={getSectionIcon(sectionsCollapsed.document)} />
							</svg>
						</button>
						{#if !sectionsCollapsed.document}
							<div class="space-y-3 border-t border-neutral-100 p-3" transition:slide={{ duration: 300 }}>
								<div>
									<p class="text-xs text-neutral-500">Document Name</p>
									<p class="text-sm font-medium text-neutral-800">{docData.metadata?.document_name || docData.file_name || 'Untitled Document'}</p>
								</div>

								{#if !isEmptyValue(docData.metadata?.subject)}
									<div>
										<p class="text-xs text-neutral-500">Subject</p>
										<p class="text-sm font-medium text-neutral-800">{docData.metadata?.subject}</p>
									</div>
								{/if}

								<div>
									<p class="text-xs text-neutral-500">Document Type</p>
									<span class="inline-flex rounded-full bg-primary-100 px-2 py-1 text-xs font-medium text-primary-800">
										{formatDocumentType(docData.doc_type)}
									</span>
								</div>

								{#if !isEmptyValue(docData.metadata?.summary)}
									<div>
										<p class="text-xs text-neutral-500">Summary</p>
										<p class="mt-1 text-sm text-neutral-700 leading-relaxed">{docData.metadata.summary}</p>
									</div>
								{/if}

								<!-- Legal Classification Information -->
								{#if docData.metadata?.legal_tags && docData.metadata.legal_tags.length > 0}
									<div>
										<p class="text-xs text-neutral-500">Legal Tags</p>
										<div class="mt-1 flex flex-wrap gap-1">
											{#each docData.metadata?.legal_tags || [] as tag, i}
												<button
													type="button"
													onclick={() => createSearchForField('legal_tags', tag)}
													class="inline-flex rounded-full bg-neutral-100 px-2 py-0.5 text-xs font-medium text-neutral-800 hover:bg-neutral-200 transition-colors"
												>
													{tag}
												</button>
											{/each}
										</div>
									</div>
								{/if}

								{#if docData.metadata?.authorities}
									<div>
										<p class="text-xs text-neutral-500">Authorities</p>
										<div class="mt-1 flex flex-wrap gap-1">
											{#if Array.isArray(docData.metadata.authorities)}
												{#each docData.metadata.authorities as authority, i}
													<span class="inline-flex rounded-full bg-blue-100 px-2 py-0.5 text-xs font-medium text-blue-800">
														{typeof authority === 'object' ? authority.citation || authority.case_title : authority}
													</span>
												{/each}
											{:else}
												<span class="text-sm font-medium text-neutral-800">
													{typeof docData.metadata.authorities === 'object' ? JSON.stringify(docData.metadata.authorities) : docData.metadata.authorities}
												</span>
											{/if}
										</div>
									</div>
								{/if}

								{#if docData.metadata?.charges && Array.isArray(docData.metadata.charges) && docData.metadata.charges.length > 0}
									<div>
										<p class="text-xs text-neutral-500">Charges</p>
										<div class="mt-1 space-y-1">
											{#each docData.metadata.charges as charge}
												<div class="text-sm">
													<span class="font-medium text-neutral-800">{charge.statute}</span>
													{#if charge.description}
														<div class="text-xs text-neutral-600">{charge.description}</div>
													{/if}
													{#if charge.grade || charge.class}
														<div class="text-xs text-neutral-500">
															{charge.grade ? `Grade: ${charge.grade}` : ''}
															{charge.class ? `Class: ${charge.class}` : ''}
														</div>
													{/if}
												</div>
											{/each}
										</div>
									</div>
								{/if}

								{#if docData.metadata?.sensitive_terms && docData.metadata.sensitive_terms.length > 0}
									<div>
										<p class="text-xs text-neutral-500">Sensitive Terms</p>
										<div class="mt-1 flex flex-wrap gap-1">
											{#each docData.metadata?.sensitive_terms || [] as term, i}
												<span class="inline-flex rounded-full bg-red-100 px-2 py-0.5 text-xs font-medium text-red-800">
													{term}
												</span>
											{/each}
										</div>
									</div>
								{/if}
							</div>
						{/if}
					</div>

					<!-- Case & Legal Information Section -->
					{#if docData.metadata?.case || docData.metadata?.case_number || docData.metadata?.case_name || docData.metadata?.court || docData.metadata?.judge}
						<div class="rounded-lg border border-neutral-200 bg-white">
							<button
								type="button"
								onclick={() => toggleSection('case')}
								class="flex w-full items-center justify-between p-3 text-left hover:bg-neutral-50"
							>
								<h4 class="text-sm font-medium text-neutral-800">Case & Legal Information</h4>
								<svg
									class="h-4 w-4 transform transition-transform {sectionsCollapsed.case ? '' : 'rotate-180'}"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={getSectionIcon(sectionsCollapsed.case)} />
								</svg>
							</button>
							{#if !sectionsCollapsed.case}
								<div class="space-y-3 border-t border-neutral-100 p-3" transition:slide={{ duration: 300 }}>
									{#if docData.metadata?.case || docData.metadata?.case_number || docData.metadata?.case_name}
										{@const caseInfo = formatCaseInfo(docData.metadata?.case)}
										
										{#if !isEmptyValue(caseInfo.number) || !isEmptyValue(docData.metadata?.case_number)}
										<div>
											<p class="text-xs text-neutral-500">Case Number</p>
											<button
												type="button"
												onclick={() => createSearchForField('case_number', caseInfo.number || docData.metadata?.case_number)}
												class="text-sm font-medium text-primary-600 hover:text-primary-800 hover:underline"
											>
												{caseInfo.number || docData.metadata?.case_number}
											</button>
										</div>
									{/if}

									{#if !isEmptyValue(caseInfo.name) || !isEmptyValue(docData.metadata?.case_name)}
										<div>
											<p class="text-xs text-neutral-500">Case Name</p>
											<button
												type="button"
												onclick={() => createSearchForField('case_name', caseInfo.name || docData.metadata?.case_name)}
												class="text-sm font-medium text-primary-600 hover:text-primary-800 hover:underline"
											>
												{caseInfo.name || docData.metadata?.case_name}
											</button>
										</div>
									{/if}

									{#if !isEmptyValue(docData.metadata?.court)}
										<div>
											<p class="text-xs text-neutral-500">Court</p>
											<button
												type="button"
												onclick={() => createSearchForField('court', formatCourtName(docData.metadata?.court))}
												class="text-sm font-medium text-primary-600 hover:text-primary-800 hover:underline"
											>
												{formatCourtName(docData.metadata?.court)}
											</button>
										</div>
									{/if}

									{#if !isEmptyValue(docData.metadata?.judge)}
										<div>
											<p class="text-xs text-neutral-500">Judge</p>
											<button
												type="button"
												onclick={() => createSearchForField('judge', formatPersonName(docData.metadata?.judge))}
												class="text-sm font-medium text-primary-600 hover:text-primary-800 hover:underline"
											>
												{formatPersonName(docData.metadata?.judge)}
											</button>
										</div>
									{/if}

									{#if !isEmptyValue(docData.metadata?.author)}
										<div>
											<p class="text-xs text-neutral-500">Author</p>
											<button
												type="button"
												onclick={() => createSearchForField('author', docData.metadata?.author)}
												class="text-sm font-medium text-primary-600 hover:text-primary-800 hover:underline"
											>
												{docData.metadata?.author}
											</button>
										</div>
									{/if}

									{#if !isEmptyValue(docData.metadata?.status)}
										<div>
											<p class="text-xs text-neutral-500">Status</p>
											<span class="inline-flex rounded-full bg-blue-100 px-2 py-1 text-xs font-medium text-blue-800">
												{docData.metadata?.status}
											</span>
										</div>
									{/if}

									<!-- Parties Information -->
									{#if docData.metadata?.parties && Array.isArray(docData.metadata.parties) && docData.metadata.parties.length > 0}
										<div>
											<p class="text-xs text-neutral-500">Parties</p>
											<div class="mt-1 space-y-2">
												{#each docData.metadata.parties as party}
													<div class="text-sm">
														<div class="font-medium text-neutral-800 break-words">{party.name}</div>
														{#if party.role}
															<div class="text-xs text-neutral-500 mt-0.5">{party.role}</div>
														{/if}
													</div>
												{/each}
											</div>
										</div>
									{/if}

									<!-- Attorneys Information -->
									{#if docData.metadata?.attorneys && Array.isArray(docData.metadata.attorneys) && docData.metadata.attorneys.length > 0}
										<div>
											<p class="text-xs text-neutral-500">Attorneys</p>
											<div class="mt-1 space-y-2">
												{#each docData.metadata.attorneys as attorney}
													<div class="text-sm">
														<div class="font-medium text-neutral-800 break-words">{attorney.name}</div>
														{#if attorney.role}
															<div class="text-xs text-neutral-500 mt-0.5">{attorney.role}</div>
														{/if}
														{#if attorney.organization}
															<div class="text-xs text-neutral-500 mt-0.5 break-words">{attorney.organization}</div>
														{/if}
													</div>
												{/each}
											</div>
										</div>
									{/if}
									{/if}
								</div>
							{/if}
						</div>
					{/if}

					<!-- Content Analysis Section -->
					{#if docData.metadata?.classification_confidence !== undefined || docData.metadata?.has_redactions !== undefined || docData.metadata?.redaction_score !== undefined || !isEmptyValue(docData.metadata?.extraction_method)}
					<div class="rounded-lg border border-neutral-200 bg-white">
						<button
							type="button"
							onclick={() => toggleSection('content')}
							class="flex w-full items-center justify-between p-3 text-left hover:bg-neutral-50"
						>
							<h4 class="text-sm font-medium text-neutral-800">Content Analysis</h4>
							<svg
								class="h-4 w-4 transform transition-transform {sectionsCollapsed.content ? '' : 'rotate-180'}"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={getSectionIcon(sectionsCollapsed.content)} />
							</svg>
						</button>
						{#if !sectionsCollapsed.content}
							<div class="space-y-3 border-t border-neutral-100 p-3" transition:slide={{ duration: 300 }}>
								<!-- AI Classification and Confidence moved to Document Properties section -->

								{#if docData.metadata?.classification_confidence !== undefined}
									<div>
										<p class="text-xs text-neutral-500">Classification Confidence</p>
										<div class="flex items-center space-x-2">
											<div class="flex-1 bg-neutral-200 rounded-full h-2">
												<div 
													class="bg-blue-600 h-2 rounded-full" 
													style="width: {formatPercentage(docData.metadata.classification_confidence).replace('%', '')}%"
												></div>
											</div>
											<span class="text-sm font-medium text-neutral-800">{formatPercentage(docData.metadata.classification_confidence)}</span>
										</div>
									</div>
								{/if}

								{#if docData.metadata?.has_redactions !== undefined}
									<div>
										<p class="text-xs text-neutral-500">Has Redactions</p>
										<span class={`inline-flex rounded-full px-2 py-1 text-xs font-medium ${docData.metadata?.has_redactions ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}`}>
											{docData.metadata?.has_redactions ? 'Yes' : 'No'}
										</span>
									</div>
								{/if}

								{#if docData.metadata?.redaction_score !== undefined}
									<div>
										<p class="text-xs text-neutral-500">Redaction Score</p>
										<div class="flex items-center space-x-2">
											<div class="flex-1 bg-neutral-200 rounded-full h-2">
												<div 
													class="bg-red-600 h-2 rounded-full" 
													style="width: {formatPercentage(docData.metadata.redaction_score).replace('%', '')}%"
												></div>
											</div>
											<span class="text-sm font-medium text-neutral-800">{formatPercentage(docData.metadata.redaction_score)}</span>
										</div>
									</div>
								{/if}

								{#if !isEmptyValue(docData.metadata?.extraction_method)}
									<div>
										<p class="text-xs text-neutral-500">Extraction Method</p>
										<span class="inline-flex rounded-full bg-purple-100 px-2 py-1 text-xs font-medium text-purple-800">
											{docData.metadata?.extraction_method}
										</span>
									</div>
								{/if}
							</div>
						{/if}
					</div>
					{/if}

					<!-- Document Properties Section -->
					<div class="rounded-lg border border-neutral-200 bg-white">
						<button
							type="button"
							onclick={() => toggleSection('properties')}
							class="flex w-full items-center justify-between p-3 text-left hover:bg-neutral-50"
						>
							<h4 class="text-sm font-medium text-neutral-800">Document Properties</h4>
							<svg
								class="h-4 w-4 transform transition-transform {sectionsCollapsed.properties ? '' : 'rotate-180'}"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={getSectionIcon(sectionsCollapsed.properties)} />
							</svg>
						</button>
						{#if !sectionsCollapsed.properties}
							<div class="space-y-3 border-t border-neutral-100 p-3" transition:slide={{ duration: 300 }}>
								{#if docData.size || docData.metadata?.size}
									<div>
										<p class="text-xs text-neutral-500">File Size</p>
										<p class="text-sm font-medium text-neutral-800">{formatFileSize(docData.size || docData.metadata?.size)}</p>
									</div>
								{/if}

								{#if !isEmptyValue(docData.content_type) || !isEmptyValue(docData.metadata?.file_type)}
									<div>
										<p class="text-xs text-neutral-500">File Type</p>
										<p class="text-sm font-medium text-neutral-800">{docData.content_type || docData.metadata?.file_type}</p>
									</div>
								{/if}

								{#if !isEmptyValue(docData.metadata?.word_count)}
									<div>
										<p class="text-xs text-neutral-500">Word Count</p>
										<p class="text-sm font-medium text-neutral-800">{formatCount(docData.metadata?.word_count)}</p>
									</div>
								{/if}

								{#if !isEmptyValue(docData.metadata?.page_count) || !isEmptyValue(docData.metadata?.pages)}
									<div>
										<p class="text-xs text-neutral-500">Page Count</p>
										<p class="text-sm font-medium text-neutral-800">{docData.metadata?.page_count || docData.metadata?.pages}</p>
									</div>
								{/if}

								{#if !isEmptyValue(docData.metadata?.language)}
									<div>
										<p class="text-xs text-neutral-500">Language</p>
										<p class="text-sm font-medium text-neutral-800">{docData.metadata?.language}</p>
									</div>
								{/if}

								<!-- AI Classification and Confidence Score on same line -->
								{#if docData.metadata?.ai_classified !== undefined || docData.metadata?.confidence !== undefined}
									<div>
										<p class="text-xs text-neutral-500 mb-2">AI Classification</p>
										<div class="flex items-center justify-between space-x-3">
											{#if docData.metadata?.ai_classified !== undefined}
												<div class="flex items-center space-x-2">
													<span class="text-xs text-neutral-500">Status:</span>
													<span class={`inline-flex rounded-full px-2 py-1 text-xs font-medium ${docData.metadata?.ai_classified ? 'bg-green-100 text-green-800' : 'bg-neutral-100 text-neutral-800'}`}>
														{docData.metadata?.ai_classified ? 'Yes' : 'No'}
													</span>
												</div>
											{/if}
											{#if docData.metadata?.confidence !== undefined}
												<div class="flex items-center space-x-2 flex-1">
													<span class="text-xs text-neutral-500 whitespace-nowrap">Confidence:</span>
													<div class="flex items-center space-x-2 flex-1">
														<div class="flex-1 bg-neutral-200 rounded-full h-2 min-w-16">
															<div 
																class="bg-primary-600 h-2 rounded-full" 
																style="width: {formatPercentage(docData.metadata.confidence).replace('%', '')}%"
															></div>
														</div>
														<span class="text-xs font-medium text-neutral-800 whitespace-nowrap">{formatPercentage(docData.metadata.confidence)}</span>
													</div>
												</div>
											{/if}
										</div>
									</div>
								{/if}

								<!-- Date Information -->
								{#if !isEmptyValue(docData.metadata?.filing_date)}
									<div>
										<p class="text-xs text-neutral-500">Filing Date</p>
										<p class="text-sm font-medium text-neutral-800">{formatDate(docData.metadata?.filing_date)}</p>
									</div>
								{/if}

								{#if !isEmptyValue(docData.metadata?.event_date)}
									<div>
										<p class="text-xs text-neutral-500">Event Date</p>
										<p class="text-sm font-medium text-neutral-800">{formatDate(docData.metadata?.event_date)}</p>
									</div>
								{/if}

								{#if !isEmptyValue(docData.metadata?.timestamp)}
									<div>
										<p class="text-xs text-neutral-500">Document Date</p>
										<p class="text-sm font-medium text-neutral-800">{formatDate(docData.metadata?.timestamp)}</p>
									</div>
								{/if}

								<div>
									<p class="text-xs text-neutral-500">Created</p>
									<p class="text-sm font-medium text-neutral-800">{formatDateTime(docData.created_at)}</p>
								</div>

								{#if !isEmptyValue(docData.updated_at)}
									<div>
										<p class="text-xs text-neutral-500">Updated</p>
										<p class="text-sm font-medium text-neutral-800">{formatDateTime(docData.updated_at)}</p>
									</div>
								{/if}

								{#if !isEmptyValue(docData.metadata?.processed_at)}
									<div>
										<p class="text-xs text-neutral-500">Processed</p>
										<p class="text-sm font-medium text-neutral-800">{formatDateTime(docData.metadata?.processed_at)}</p>
									</div>
								{/if}
							</div>
						{/if}
					</div>

					<!-- Legal Classification content moved to Document Information section -->

					<!-- Success Message -->
					{#if successMessage}
						<div
							class="mb-4 rounded-lg bg-green-50 border border-green-200 p-3"
							in:slide={{ duration: 300 }}
							out:slide={{ duration: 300 }}
						>
							<div class="flex items-center">
								<svg
									class="h-4 w-4 text-green-400 mr-2"
									fill="currentColor"
									viewBox="0 0 20 20"
								>
									<path
										fill-rule="evenodd"
										d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
										clip-rule="evenodd"
									/>
								</svg>
								<p class="text-sm font-medium text-green-800">{successMessage}</p>
							</div>
						</div>
					{/if}

					<!-- Case Actions -->
					{#if session && supabase}
						<div class="m-auto flex flex-col md:flex-row justify-center gap-2 align-middle">
							<button
								onclick={openAddToCaseModal}
								class="mt-4 flex w-full items-center justify-center rounded-lg border-primary-600 bg-white px-2 md:px-3 py-2 text-xs font-medium text-black hover:bg-primary-600 hover:text-white transition-colors"
								in:scale={{ start: 0.5, duration: 300, delay: 1300, easing: cubicOut }}
							>
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="mr-1 h-3 w-3"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
									/>
								</svg>
								<span class="hidden md:inline">Add to Case</span>
								<span class="md:hidden">Add Case</span>
							</button>
							<button
								onclick={openNewCaseModal}
								class="mt-4 flex w-full items-center justify-center rounded-lg bg-primary-600 px-2 md:px-3 py-2 text-xs font-medium text-white hover:bg-primary-700 transition-colors"
								in:scale={{ start: 0.5, duration: 300, delay: 1350, easing: cubicOut }}
							>
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="mr-1 h-3 w-3"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M12 4v16m8-8H4"
									/>
								</svg>
								New Case
							</button>
						</div>
						<div class="mt-2 flex justify-center">
							<a
								href={url}
								download={docData.file_name}
								class="flex items-center text-xs text-primary-600 hover:text-primary-800 underline"
								in:scale={{ start: 0.5, duration: 300, delay: 1400, easing: cubicOut }}
							>
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="mr-1 h-3 w-3"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
									/>
								</svg>
								Download
							</a>
						</div>
					{/if}
				</div>
			</div>

			<!-- Document Viewer area -->
			<div
				class="relative w-full flex-1 overflow-hidden min-h-[60vh] md:min-h-auto"
				in:fly={{ x: 20, duration: 800, delay: 350, easing: cubicOut }}
			>
				<!-- Header with close button -->
				<div
					class="absolute right-0 top-0 z-10 flex items-center justify-end p-4"
					in:fly={{ y: -10, duration: 700, delay: 800, easing: cubicOut }}
				>
					<button
						type="button"
						class="rounded-full bg-white/90 p-2 shadow-md hover:bg-neutral-100"
						onclick={closeViewer}
						in:scale={{ start: 0.9, duration: 600, delay: 900 }}
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="h-6 w-6 text-neutral-500"
							fill="none"
							viewBox="0 0 24 24"
							stroke="currentColor"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M6 18L18 6M6 6l12 12"
							/>
						</svg>
					</button>
				</div>

				<!-- Document content -->
				<div class="h-full w-full overflow-auto bg-neutral-100">
					{#if isLoading}
						<div class="flex h-full w-full items-center justify-center p-6">
							<div class="flex flex-col items-center space-y-4">
								<div class="h-8 w-8 animate-spin rounded-full border-4 border-primary-200 border-t-primary-600"></div>
								<p class="text-neutral-600">Loading document...</p>
							</div>
						</div>
					{:else if url || blobUrl}
						<!-- Direct PDF/document display using object tag to bypass X-Frame-Options -->
						{#key viewerKey}
							<object
								data={useBlobFallback ? blobUrl : url}
								type="application/pdf"
								width="100%"
								height="100%"
								class="h-full w-full"
								onload={handleViewerLoaded}
								onerror={() => handleViewerError()}
							>
							<!-- Fallback content if object fails to load -->
							<div class="flex h-full w-full items-center justify-center p-6">
								<div class="max-w-md rounded-lg border border-primary-100 bg-primary-50 p-6 text-center">
									<svg
										xmlns="http://www.w3.org/2000/svg"
										class="mx-auto mb-4 h-12 w-12 text-primary-400"
										fill="none"
										viewBox="0 0 24 24"
										stroke="currentColor"
									>
										<path
											stroke-linecap="round"
											stroke-linejoin="round"
											stroke-width="2"
											d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
										/>
									</svg>
									<p class="text-neutral-700 mb-4">
										Unable to display PDF in browser. This may be due to browser security settings.
									</p>
									<div class="space-y-3">
										{#if !useBlobFallback && url}
											<button
												type="button"
												onclick={loadDocumentAsBlob}
												class="inline-flex items-center rounded-lg bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 mr-2"
											>
												<svg
													xmlns="http://www.w3.org/2000/svg"
													class="mr-2 h-4 w-4"
													fill="none"
													viewBox="0 0 24 24"
													stroke="currentColor"
												>
													<path
														stroke-linecap="round"
														stroke-linejoin="round"
														stroke-width="2"
														d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
													/>
												</svg>
												Try Alternative Loading
											</button>
										{/if}
										<a
											href={useBlobFallback ? blobUrl : url}
											download={docData.file_name}
											class="inline-flex items-center rounded-lg bg-primary-600 px-4 py-2 text-sm font-medium text-white hover:bg-primary-700"
										>
											<svg
												xmlns="http://www.w3.org/2000/svg"
												class="mr-2 h-4 w-4"
												fill="none"
												viewBox="0 0 24 24"
												stroke="currentColor"
											>
												<path
													stroke-linecap="round"
													stroke-linejoin="round"
													stroke-width="2"
													d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
												/>
											</svg>
											Download PDF
										</a>
									</div>
								</div>
							</div>
							</object>
						{/key}
					{:else}
						<div class="flex h-full w-full items-center justify-center p-6">
							<div
								class="max-w-md rounded-lg border border-primary-100 bg-primary-50 p-6 text-center"
								in:scale={{ start: 0.95, duration: 700, delay: 700, easing: cubicOut }}
							>
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="mx-auto mb-4 h-12 w-12 text-primary-400"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
									in:scale={{ start: 0.8, duration: 800, delay: 800, easing: cubicOut }}
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
									/>
								</svg>
								<p class="text-neutral-700" in:slide={{ duration: 600, delay: 900 }}>
									This file type cannot be previewed directly in the browser.
								</p>
								<a
									href={url}
									download={docData.file_name}
									class="mt-4 inline-flex items-center rounded-lg bg-primary-600 px-4 py-2 text-sm font-medium text-white hover:bg-primary-700"
									in:scale={{ start: 0.98, duration: 700, delay: 1000, easing: cubicOut }}
								>
									Download File
								</a>
							</div>
						</div>
					{/if}

					{#if errorMessage}
						<div
							class="absolute inset-0 flex items-center justify-center bg-white bg-opacity-90"
							transition:fade={{ duration: 600 }}
						>
							<div
								class="max-w-md rounded-lg border border-red-100 bg-red-50 p-6 text-center"
								in:scale={{ start: 0.95, duration: 700, easing: cubicOut }}
							>
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="mx-auto mb-4 h-12 w-12 text-red-400"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
									in:scale={{ start: 0.8, duration: 800, delay: 150, easing: cubicOut }}
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
									/>
								</svg>
								<p class="text-neutral-700" in:slide={{ duration: 600, delay: 300 }}>
									{errorMessage}
								</p>
								<a
									href={url}
									download={docData.file_name}
									class="mt-4 inline-flex items-center rounded-lg bg-primary-600 px-4 py-2 text-sm font-medium text-white hover:bg-primary-700"
									in:scale={{ start: 0.98, duration: 700, delay: 450, easing: cubicOut }}
								>
									Download File
								</a>
							</div>
						</div>
					{/if}
				</div>
			</div>
		</div>
	</div>
{/if}

<!-- Add to Case Modal -->
{#if showAddToCaseModal}
	<div
		class="fixed inset-0 z-[60] overflow-y-auto"
		in:fade={{ duration: 200 }}
		out:fade={{ duration: 200 }}
	>
		<div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center">
			<!-- Backdrop -->
			<div class="fixed inset-0 bg-neutral-500 bg-opacity-75 transition-opacity" onclick={closeAddToCaseModal}></div>

			<!-- Modal Content -->
			<div
				class="relative inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:align-middle sm:max-w-lg sm:w-full z-10"
				in:scale={{ start: 0.95, duration: 200 }}
				out:scale={{ start: 1, end: 0.95, duration: 200 }}
			>
				<div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
					<h3 class="text-lg font-medium text-neutral-900 mb-4">Add Document to Case</h3>
					<div class="space-y-4">
						<div>
							<label for="case-select" class="block text-sm font-medium text-neutral-700">Select Case</label>
							<div class="mt-1">
								<select
									id="case-select"
									bind:value={selectedCaseId}
									class="block w-full appearance-none rounded-md border border-neutral-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
								>
									<option value="">Choose a case...</option>
									{#each cases as caseItem}
										<option value={caseItem.id}>{caseItem.case_name}</option>
									{/each}
								</select>
							</div>
						</div>
						<div>
							<label for="document-notes" class="block text-sm font-medium text-neutral-700">Notes (optional)</label>
							<div class="mt-1">
								<textarea
									id="document-notes"
									bind:value={documentNotes}
									rows="3"
									placeholder="Add any notes about this document..."
									class="block w-full appearance-none rounded-md border border-neutral-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
								></textarea>
							</div>
						</div>
					</div>
				</div>
				<div class="bg-neutral-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
					<button
						type="button"
						class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50"
						disabled={!selectedCaseId || isAddingToCase}
						onclick={addDocumentToCase}
					>
						{#if isAddingToCase}
							<div class="flex items-center">
								<div class="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white/30 border-t-white"></div>
								<span>Adding...</span>
							</div>
						{:else}
							Add to Case
						{/if}
					</button>
					<button
						type="button"
						class="mt-3 w-full inline-flex justify-center rounded-md border border-neutral-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-neutral-700 hover:bg-neutral-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
						onclick={closeAddToCaseModal}
					>
						Cancel
					</button>
				</div>
			</div>
		</div>
	</div>
{/if}

<!-- Create New Case Modal -->
{#if showNewCaseModal}
	<div
		class="fixed inset-0 z-[60] overflow-y-auto"
		in:fade={{ duration: 200 }}
		out:fade={{ duration: 200 }}
	>
		<div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center">
			<!-- Backdrop -->
			<div class="fixed inset-0 bg-neutral-500 bg-opacity-75 transition-opacity" onclick={closeNewCaseModal}></div>

			<!-- Modal Content -->
			<div
				class="relative inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:align-middle sm:max-w-lg sm:w-full z-10"
				in:scale={{ start: 0.95, duration: 200 }}
				out:scale={{ start: 1, end: 0.95, duration: 200 }}
			>
				<div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
					<h3 class="text-lg font-medium text-neutral-900 mb-4">Create New Case</h3>
					<div class="space-y-4">
						<div>
							<label for="new-case-name" class="block text-sm font-medium text-neutral-700">Case Name</label>
							<div class="mt-1">
								<input
									id="new-case-name"
									type="text"
									bind:value={newCaseName}
									placeholder="Enter case name..."
									class="block w-full appearance-none rounded-md border border-neutral-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
									onkeydown={(e) => e.key === 'Enter' && createCaseAndAddDocument()}
								/>
							</div>
						</div>
						<div>
							<label for="new-case-notes" class="block text-sm font-medium text-neutral-700">Document Notes (optional)</label>
							<div class="mt-1">
								<textarea
									id="new-case-notes"
									bind:value={documentNotes}
									rows="3"
									placeholder="Add any notes about this document..."
									class="block w-full appearance-none rounded-md border border-neutral-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
								></textarea>
							</div>
						</div>
					</div>
				</div>
				<div class="bg-neutral-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
					<button
						type="button"
						class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50"
						disabled={!newCaseName.trim() || isCreatingCase}
						onclick={createCaseAndAddDocument}
					>
						{#if isCreatingCase}
							<div class="flex items-center">
								<div class="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white/30 border-t-white"></div>
								<span>Creating...</span>
							</div>
						{:else}
							Create Case & Add Document
						{/if}
					</button>
					<button
						type="button"
						class="mt-3 w-full inline-flex justify-center rounded-md border border-neutral-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-neutral-700 hover:bg-neutral-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
						onclick={closeNewCaseModal}
					>
						Cancel
					</button>
				</div>
			</div>
		</div>
	</div>
{/if}

<style>
	.opac {
		background-color: rgba(0, 0, 0, 0.5);
	}
</style>
